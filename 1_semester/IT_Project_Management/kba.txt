&НаКлиенте
Процедура Загрузить(Команда)
    Результат = ЗагрузитьНаСервере();
    // Результат — количество обработанных строк тип данных число

    Сообщить("Загружено " + Результат + " строк");
    // преобразуется в строку.
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()

    ДокументСтоимостей = Документы.УстановкаСтоимостиБлюд.СоздатьДокумент();
    // Создается новый документ "Установка стоимости блюд". ДокументОбъект

    ДокументСтоимостей.УстановитьНовыйНомер();
    // Присваивается новый уникальный номер документ

    ДокументСтоимостей.Дата = ТекущаяДата();
    // Устанавливается текущая дата документа Тип: Дата

    КолвоЭлементов = 0;
    // Инициализация счетчика обработанных строк Тип: Число

    ПерваяСтрока = 2;
    // Определение номера первой строки для обработки

    Для НомерСтроки = ПерваяСтрока По Объект.ТабДок.ВысотаТаблицы Цикл
        // Цикл по строкам табличного документа от первой до последней строки
        // НомерСтроки — текущий номер строки тип: Число
        // ВысотаТаблицы — свойство объекта ТабДок, возвращает количество строк в таблице

        ТекущаяСтрока = ПолучитьСодержимоеСтрокиДокумента(Объект.ТабДок, НомерСтроки);
        // Получение содержимого текущей строки с помощью функции тип данных: Структура

        Если (ТекущаяСтрока.Количество() = 0) Тогда
            //если строка пустая (Количество() возвращает количество заполненных колонок)
            Прервать;
           
        КонецЕсли;	 

        Если (ТекущаяСтрока.Наименование = "Соответствие категорий блюд с данными файла" 
            ИЛИ ТекущаяСтрока.Количество() = 3) Тогда
            // строка является заголовком или содержит только 3 заполненных колонки
            Прервать;
            
        КонецЕсли;

        Если (ТекущаяСтрока.Количество() < 9) Тогда
            // Если строка содержит меньше 9 заполненных полей
            Сообщить("Не все значения блюда " + ТекущаяСтрока.Наименование + " заполнены!");
        
            Продолжить;
    
        КонецЕсли;	

        РезультатПоиска = Справочники.Блюда.НайтиПоНаименованию(ТекущаяСтрока.Наименование);
        // Поиск элемента в справочнике "Блюда" по наименованию тип возвращаемого значения: СправочникОбъект

        Если (Не РезультатПоиска.Пустая()) Тогда
            // Если элемент найден (Пустая() возвращает Булево)
            НоваяЗапись = ДокументСтоимостей.ТаблицаЦен.Добавить();
            // Добавление новой строки в табличную часть документа

            НоваяЗапись.Блюдо = РезультатПоиска;
            // Заполнение поля "Блюдо" ссылкой на найденный элемент справочника

            НоваяЗапись.Цена = ТекущаяСтрока.Цена;
            // Установка цены для блюда

            Сообщить("Блюдо " + ТекущаяСтрока.Наименование + " уже есть!");
            // Сообщение пользователю о наличии блюда в справочнике
            Продолжить;
           
        КонецЕсли;

        Если (Не ОбрабатыватьНовыеБлюда) Тогда
            // Если запрещено добавлять новые блюда.
            Сообщить("Блюдо " + ТекущаяСтрока.Наименование + " не найдено!");
            
            Продолжить;
            
        КонецЕсли;

        КолвоЭлементов = КолвоЭлементов + 1;
        // Увеличение счетчика обработанных строк

        НоваяЗапись = ДокументСтоимостей.ТаблицаЦен.Добавить();
        // Добавление новой строки в табличную часть документа

        НовоеБлюдо = Справочники.Блюда.СоздатьЭлемент();
        // Создание нового элемента справочника 
		
        НовоеБлюдо.Наименование = ТекущаяСтрока.Наименование;
        // Установка наименования для нового блюда

        НовоеБлюдо.Вес = ТекущаяСтрока.Вес;
        // Установка веса блюда

        НовоеБлюдо.Состав = ТекущаяСтрока.Состав;
        // Установка состава блюда

        НовоеБлюдо.Калорийность = ТекущаяСтрока.Калорийность;

        // Проверка и установка категории блюда в зависимости от режима обработки.
        Если (РежимОбработки = 1) Тогда
            Категор = ТекущаяСтрока.ИДКатегории;     
            // Получение ИД категории    
			
            СтруктураКатегорий = ПолучитьСтруктуруКатегорийБлюд();
            // Получение структуры категорий блюд
			
            ПоискКатегорий = Перечисления.КатегорииБлюд[СтруктураКатегорий[Категор]];
			// Получение элемента из перечисления "КатегорииБлюд" по названию категории,
			// которое извлекается из структуры "СтруктураКатегорий" по ключу "Категор"
            // Определение категории блюда по ИД
			
        ИначеЕсли (РежимОбработки = 2) Тогда
            Категор = ТекущаяСтрока.НомерКатегории;      
			
            // Получение номера категории
            МассивКатегорий = ПолучитьМассивКатегорийБлюд(); 
			
            // Получение массива категорий блюд
            ПоискКатегорий = Перечисления.КатегорииБлюд[МассивКатегорий.Получить(Число(Категор))];
            // Определение категории блюда по номеру
			
        ИначеЕсли (РежимОбработки = 3) Тогда
            Категор = ТекущаяСтрока.Категория;  
			
            // Получение названия категории
            ПоискКатегорий = Перечисления.КатегорииБлюд[Категор];
            // Прямое использование названия категории
			
        КонецЕсли;

        НовоеБлюдо.Категория = ПоискКатегорий;
        // Установка категории для нового блюда

        НДС = ТекущаяСтрока.НДС;
        // Получение ставки НДС

        ПоискНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(НДС);
        // Поиск ставки НДС в справочнике                   

        Если (ПоискНДС.Пустая()) Тогда
            // Если ставка НДС не найдена
            НоваяСтавка = Справочники.СтавкиНДС.СоздатьЭлемент();
            // Создание новой ставки НДС  
			
            НоваяСтавка.СтавкаНДСЧислом(Число(НДС));
            // Установка числового значения ставки НДС
            НоваяСтавка.Записать();  
			
            // Сохранение новой ставки НДС
            НовоеБлюдо.НДС = НоваяСтавка.Ссылка;
            // Привязка новой ставки НДС к блюду
        Иначе
            НовоеБлюдо.НДС = ПоискНДС;
            // Привязка найденной ставки НДС к блюду
        КонецЕсли;

        НовоеБлюдо.Записать();
        // Сохранение нового блюда в справочник

        НоваяЗапись.Блюдо = НовоеБлюдо.Ссылка;
        // Установка ссылки на блюдо в записи документа
        НоваяЗапись.Цена = ТекущаяСтрока.Цена;
        // Установка цены блюда
		
    КонецЦикла;

    ДокументСтоимостей.Проведен = Истина;
    // Устанавливается флаг проведения документа

    ДокументСтоимостей.Записать(РежимЗаписиДокумента.Проведение);

    Возврат КолвоЭлементов;
    // Возвращение колва обработанных строк
КонецФункции

&НаСервере
Функция ПолучитьСодержимоеСтрокиДокумента(ТабличныйДокумент, НомерСтроки)
    //функция, предназначенная для извлечения данных из строки табличного документа 
    // и формирования структуры, содержащей пары "ключ-значение" (ключи — это названия колонок)

    МассивНаименований = ПолучитьНаименованииеКолонок();
    // МассивНаименований содержит последовательность строк
	
    СодержимоеСтроки = Новый Структура;
    // Создаем объект типа Структура для хранения данных из строки таблицы

    Для К = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
        // Цикл по всем колонкам строки таблицы
		
        ТекущаяЯчейка = (СокрЛП(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(К, "ЧГ=")).Текст));
        // Извлекаем текст ячейки из таблицы:
        // ТабличныйДокумент.Область — доступ к конкретной ячейке на основе координат строки и колонки
        // Формат — преобразует номер строки и колонки в текстовый формат
        // Текст — свойство ячейки, которое содержит текстовое значение
        // СокрЛП — удаляет пробелы в начале и в конце строки

        ЕСЛИ (ТекущаяЯчейка = "") Тогда
            
            Продолжить;
        КонецЕсли;

        Если (К = 7) Тогда
            // Если обрабатывается 7-я колонка, то 
			// ТРег — приводит текст к верхнему регистру
            // СтрЗаменить — удаляет все пробелы из текста
            ТекущаяЯчейка = СтрЗаменить(ТРег(ТекущаяЯчейка), " ", "");
        КонецЕсли;  

        СодержимоеСтроки.Вставить(МассивНаименований[К-1], ТекущаяЯчейка);
        // Добавляем в структуру значение ячейки (ТекущаяЯчейка) с ключом из массива названий колонок
        // МассивНаименований[К-1] — название колонки 
    КонецЦикла;

    Возврат СодержимоеСтроки;
    // Возвращаем структуру содержащую извлеченные данные строки.
КонецФункции

&НаСервере
Функция ПолучитьНаименованииеКолонок()

	Массивчик = Новый Массив;
	Массивчик.Добавить("Наименование");
	Массивчик.Добавить("Вес");
	Массивчик.Добавить("Состав");
	Массивчик.Добавить("Калорийность");
	Массивчик.Добавить("ИДкатегории");
	Массивчик.Добавить("НомерКатегории");
	Массивчик.Добавить("Категория");
	Массивчик.Добавить("НДС");
	Массивчик.Добавить("Цена");
	
	Возврат Массивчик;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивКатегорийБлюд()
	Массивчик = Новый Соответствие;
	Массивчик.Вставить(0, "Десерты");
	Массивчик.Вставить(1, "ГорячиеЗакуски");
	Массивчик.Вставить(2, "Супы");
	Массивчик.Вставить(3, "ХолодныеЗакуски");
	Массивчик.Вставить(4, "Напитки");
	Массивчик.Вставить(5, "ГорячиеБлюда");
	
	Возврат Массивчик;
КонецФУнкции	

&НаСервере
Функция ПолучитьСтруктуруКатегорийБлюд()
	ЗначенияКатегорий = Новый Структура;
	ЗначенияКатегорий.Вставить("ДС", "Десерты"); 
	ЗначенияКатегорий.Вставить("ГЗ", "ГорячиеЗакуски");
	ЗначенияКатегорий.Вставить("СП", "Супы");
	ЗначенияКатегорий.Вставить("ХЗ", "ХолодныеЗакуски");
	ЗначенияКатегорий.Вставить("НП", "Напитки");
	ЗначенияКатегорий.Вставить("ГБ", "ГорячиеБлюда");	
	
	Возврат ЗначенияКатегорий;
КонецФункции			

&НаКлиенте
Процедура ОбрабатыватьНовыеБлюдаПриИзменении(Элемент)
	Элементы.СпособОбработки.Видимость = ОбрабатыватьНовыеБлюда;
КонецПроцедуры
